# Documentation: https://wiki.unvanquished.net/wiki/Continuous_integration

trigger:
  branches:
    include:
      - master

pr:
  branches:
    include:
      - '*'
  paths:
    include:
      - .azure-pipelines.yml
      # The rest of this list should stay in sync with .appveyor.yml
      - crunch/
      - crnlib/
      - inc/
      - example1/
      - example2/
      - example3/
      - test/
      - cmake/
      - CMakeLists.txt

strategy:
  matrix:
    Linux amd64 GCC:
      VM_IMAGE: 'ubuntu-20.04'
      APT_PACKAGES: ninja-build g++-8
      CXX_COMPILER: g++-8
    Linux i686 GCC:
      VM_IMAGE: 'ubuntu-20.04'
      APT_PACKAGES: ninja-build g++-i686-linux-gnu
      CXX_COMPILER: i686-linux-gnu-g++
      COMPILER_FLAGS: -mfpmath=sse -msse
    Linux arm64 GCC:
      VM_IMAGE: 'ubuntu-20.04'
      APT_PACKAGES: ninja-build g++-aarch64-linux-gnu qemu-user
      CXX_COMPILER: aarch64-linux-gnu-g++
      CRUNCH_EXE_RUNNER: qemu-aarch64 -L /usr/aarch64-linux-gnu
    Linux armhf GCC:
      VM_IMAGE: 'ubuntu-20.04'
      APT_PACKAGES: ninja-build g++-arm-linux-gnueabihf qemu-user
      CXX_COMPILER: arm-linux-gnueabihf-g++
      CRUNCH_EXE_RUNNER: qemu-arm -L /usr/arm-linux-gnueabihf
      # There is a qemu-arm IO bug in ubuntu-20.04 and ubuntu-22.04,
      # remove when ubuntu-24.04 is available.
      CRUNCH_SIMPLE_TEST: true
    Linux amd64 Clang:
      VM_IMAGE: 'ubuntu-20.04'
      APT_PACKAGES: ninja-build
      CXX_COMPILER: clang++
    Windows amd64 MinGW:
      VM_IMAGE: 'ubuntu-22.04'
      APT_PACKAGES: ninja-build g++-mingw-w64-x86-64 mingw-w64-x86-64-dev gcc-mingw-w64-x86-64-posix-runtime wine
      SETUP_COMMANDS: sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      TOOLCHAIN_FILE: cmake/cross-toolchain-mingw64.cmake
      CRUNCH_EXE_RUNNER: wine
      CRUNCH_EXTENSION: .exe
      RUNTIME_FILES: /usr/lib/gcc/x86_64-w64-mingw32/10-posix/libgcc_s_seh-1.dll /usr/lib/gcc/x86_64-w64-mingw32/10-posix/libstdc++-6.dll /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll
    Windows i686 MinGW:
      VM_IMAGE: 'ubuntu-22.04'
      APT_ARCHITECTURE: i386
      APT_PACKAGES: ninja-build g++-mingw-w64-i686 mingw-w64-i686-dev gcc-mingw-w64-i686-posix-runtime wine wine32
      SETUP_COMMANDS: sudo update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix
      TOOLCHAIN_FILE: cmake/cross-toolchain-mingw32.cmake
      COMPILER_FLAGS: -mfpmath=sse -msse
      CRUNCH_EXE_RUNNER: wine
      CRUNCH_EXTENSION: .exe
      RUNTIME_FILES: /usr/lib/gcc/i686-w64-mingw32/10-posix/libgcc_s_dw2-1.dll /usr/lib/gcc/i686-w64-mingw32/10-posix/libstdc++-6.dll /usr/i686-w64-mingw32/lib/libwinpthread-1.dll
    macOS amd64 AppleClang:
      VM_IMAGE: 'macOS-13'
      PIP_PACKAGES: colorama
      CMAKE_GENERATOR: Unix Makefiles
      NPROC_COMMAND: sysctl -n hw.logicalcpu
    macOS arm64 AppleClang:
      VM_IMAGE: 'macOS-13'
      PIP_PACKAGES: colorama
      CMAKE_GENERATOR: Unix Makefiles
      COMPILER_FLAGS: -target arm64-apple-macos11 -Wno-overriding-t-option
      NPROC_COMMAND: sysctl -n hw.logicalcpu
      RUN_TESTS: false
    Web Asm.js Emscripten:
      VM_IMAGE: 'ubuntu-22.04'
      APT_PACKAGES: ninja-build emscripten
      TOOLCHAIN_FILE: /usr/share/emscripten/cmake/Modules/Platform/Emscripten.cmake
      SOURCE_DIR: emscripten
      EXECUTABLES: crunch.js crunch.wasm
      RUN_TESTS: false

pool:
  vmImage: $(VM_IMAGE)

steps:
- bash: |
    set -xue
    if [ -n "${APT_ARCHITECTURE:-}" ]; then
      sudo dpkg --add-architecture "${APT_ARCHITECTURE}"
    fi
    if [ -n "${APT_PACKAGES:-}" ]; then
      sudo apt-get update && sudo apt-get -y -q --no-install-recommends install ${APT_PACKAGES}
    fi
    if [ -n "${PIP_PACKAGES:-}" ]; then
      pip install ${PIP_PACKAGES}
    fi
    if [ -n "${SETUP_COMMANDS:-}" ]; then
     $(SETUP_COMMANDS)
    fi
  displayName: 'Setup'
- bash: |
    set -xue
    export CMAKE_BUILD_PARALLEL_LEVEL="$(${NPROC_COMMAND:-nproc})"
    echo "${CMAKE_BUILD_PARALLEL_LEVEL}"
    cmake_args=(-G"${CMAKE_GENERATOR:-Ninja}")
    if [ -n "${TOOLCHAIN_FILE:-}" ]; then
        cmake_args+=(-DCMAKE_TOOLCHAIN_FILE="${TOOLCHAIN_FILE}")
    fi
    if [ -n "${CXX_COMPILER:-}" ]; then
        cmake_args+=(-DCMAKE_CXX_COMPILER="${CXX_COMPILER}")
    fi
    if [ -n "${COMPILER_FLAGS:-}" ]; then
        cmake_args+=(-DCMAKE_CXX_FLAGS="${COMPILER_FLAGS}")
    fi
    if [ -z "${SOURCE_DIR:-}" ]; then
        cmake_args+=(-DBUILD_CRUNCH=ON -DBUILD_EXAMPLES=ON -DBUILD_SHARED_LIBS=ON)
    fi
    cmake -S"${SOURCE_DIR:-.}" -Bbuild "${cmake_args[@]}"
    cmake --build build --config Release
  displayName: 'Build'
- bash: |
    set -xue
    EXECUTABLES="${EXECUTABLES:-crunch example1 example2 example3}"
    for exe_file in ${EXECUTABLES}; do
      file 'build/${exe_file}${CRUNCH_EXTENSION:-}'
    done
    if [ -n "${RUNTIME_FILES:-}" ]; then
        cp -av ${RUNTIME_FILES} build/
    fi
    if "${RUN_TESTS:-true}"; then
      test/test.py
    fi
  displayName: 'Test'
